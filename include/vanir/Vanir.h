#ifndef	_VANIR_VANIR_H_
#define	_VANIR_VANIR_H_

#include <vanir/Common.h>
#include <vanir/Module.h>
#include <vanir/Type.h>
#include <string>
#include <vector>

#if defined(_VANIR_PARSER_)
	#define RUNTIME __attribute__((annotate("VanirRuntime")))
#else
	#define RUNTIME
#endif//defined(_VANIR_PARSER_)

namespace vanir
{
	class Type;

	template<typename T>
	struct type_info
	{
		static const std::string	fullname;
	};//struct type_info

	/**
	 * Do the initialization for vanir library
	 */
	void InitVanir(void);
	/**
	 * Load a module which source generated by VanirParser.
	 */
	void LoadModule(Module& module);
	/**
	 * Get type from type prototype.
	 */
	template<typename T>
	const Type* const GetType(void);
	/**
	 * Get a type by id
	 * @param id: the id of the specified type
	 */
	const Type* const GetTypeByID(const type_id id);

	/**
	 * Get a type by name
	 * @param name: the name of the specified type
	 */
	const Type* const GetTypeByName(const std::string& name);

	/**
	 * Get all type list registered in the vanir library.
	 */
	const std::vector<const Type*>& GetAllTypeList(void);


	template<typename T>
	const Type* const GetType(void)
	{
		const std::string& fullName = type_info<T>::fullname;
		return GetTypeByName(fullName);
	}
};//namespace vanir
#endif//_VANIR_VANIR_H_
